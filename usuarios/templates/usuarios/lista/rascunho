<!-- <td>
    <a href="{% url 'editar-usuario' usuario.pk %}" class="btn btn-sm btn-editar">Editar</a>
    <a href="{% url 'excluir-usuario' usuario.pk %}" class="btn btn-sm btn-excluir">Excluir</a> 
</td> -->

<!-- <div class="input-field col s4">
    {{ form.rua }}
    <label for="{{ form.rua.id_for_label }}">Rua</label>
</div>

<div class="input-field col s4">
    {{ form.numero }}
    <label for="{{ form.numero.id_for_label }}">Número</label>
</div>

<div class="input-field col s4">
    {{ form.bairro }}
    <label for="{{ form.bairro.id_for_label }}">bairro</label>
</div>

<div class="input-field col s4">
    {{ form.cidade }}
    <label for="{{ form.cidade.id_for_label }}">Cidade</label>
</div> -->

"""class UsuarioCreate(GroupRequiredMixin, LoginRequiredMixin, CreateView):
    login_url = reverse_lazy('login')
    group_required = u'Administrador'
    form_class = UsuarioForm
    template_name = 'usuarios/form_usuario.html'
    success_url = reverse_lazy('listar-usuarios')

    
    def get_context_data(self, *args, **kwargs):
        context = super().get_context_data(*args, **kwargs)

        context['titulo'] = 'Cadastro de Novo Usuário'

        return context
    

    '''def form_valid(self, form):

        grupo = get_object_or_404(Group, name='Administrador')

        url = super().form_valid(form)

        self.object.groups.add(grupo)

        return url'''"""
    
"""class UsuarioUpdate(GroupRequiredMixin, LoginRequiredMixin, UpdateView):
    login_url = reverse_lazy('login')
    group_required = u'Administrador'
    model = User
    form_class = UsuarioForm
    template_name = 'usuarios/form_usuario.html'
    success_url = reverse_lazy('listar-usuarios')

    def get_context_data(self, *args, **kwargs):
        context = super().get_context_data(*args, **kwargs)

        context['titulo'] = 'Editar Usuário'

        return context
    

class UsuarioList(GroupRequiredMixin, LoginRequiredMixin, ListView):
    login_url = reverse_lazy('login')
    group_required = u'Administrador'
    model = User
    template_name = 'usuarios/lista/usuario.html'
    success_url = reverse_lazy('listar-usuarios') -->


    def get(self, request, *args, **kwargs):
        user = self.request.user
        is_admin = user.groups.filter(name='Administrador').exists
        is_medico = user.groups.filter(name='Medico').exists
        return render(request, self.template_name, {'is_admin': is_admin, 'is_medico': is_medico}) """

<!-- <h1>Agenda do Médico: {{ agenda.medico }}</h1>

    <button onclick="showAddDateForm()">Adicionar Data</button>

    <div id="date-form" style="display: none;">
        <form action="{% url 'adicionar_data' %}" method="post">
            {% csrf_token %}
            <!-- Campos do formulário para adicionar data -->
            <!--<input type="submit" value="Adicionar Data">
        </form>
    </div>

    <div id="time-form" style="display: none;">
        <form action="{% url 'adicionar_horario' %}" method="post">
            {% csrf_token %}
            <input type="hidden" id="date-input" name="date" value="">
            <!-- Campos do formulário para adicionar horário -->
            <!--<input type="submit" value="Adicionar Horário">
        </form>
    </div>

    <h2>Datas na Agenda:</h2>
    <ul>
        {% for date in agenda.dataagenda_set.all %}
            <li>
                {{ date.data }}
                <button onclick="showAddTimeForm({{ date.id }})">Adicionar Horário</button>
                <ul>
                    {% for time in date.horariodisponivel_set.all %}
                        <li>{{ time.horario_disponivel }}</li>
                    {% endfor %}
                </ul>
            </li>
        {% endfor %}
    </ul>
        </div>
    </div>

{% endblock %}


{% block scripts %}
<script>
    $(document).ready(function () {
        $('#add-date-button').click(function () {
            $('#date-form').show();
        });

        $('#add-time-button').click(function () {
            var dateId = $('#date-select').val();
            $('#date-input').val(dateId);
            $('#time-form').show();
        });
    });
</script> 
{% endblock %}-->

"""@receiver(post_save, sender=HorarioMedico)
def horario_saved(sender, instance, created, **kwargs):
    if created:
        medico = instance.agenda.medico
        periodo_inicial = '15-10-2023' 
        periodo_final = '30-10-2023'  

        agenda_medico = GerarAgendaMedico(medico, periodo_inicial, periodo_final)

        # Gere a agenda automaticamente.
        agenda_medico.gerar_agenda()"""


        """path('horarios-disponiveis', HorariosDisponiveis.as_view(), name='horarios-disponiveis'),
        path('teste', Teste.as_view(), name='teste'),
    
        #urls cadastros
        path('agendar/consulta', AgendarConsulta.as_view(), name='agendar-consulta'),
    
        #urls pada edição
        path('editar/agendamento/<int:pk>', AgendamentoUpdate.as_view(), name='editar-agendamento'),
    
        #urls para deletar
        path('deletar/agendamento/<int:pk>', AgendamentoDelete.as_view(), name='excluir-agendamento'),
    
        #urls para listagem
        path('consultas/agendadas', AgendamentoList.as_view(), name='consultas-agendadas'),
        path('pacientes-do-dia', PacientesDoDia.as_view(), name='pacientes-do-dia'),
    
        #urls para detalhar
        path('detalhes_agendamento/<int:pk>', Detalhes_Agendamento.as_view(), name='detalhes_agendamento'),
    
        # Urls para requisições json
        path('retornar-horarios', retornar_horarios, name='retornar-horarios'),
        path('valor-consulta', valor_consulta, name='valor-consulta'),"""